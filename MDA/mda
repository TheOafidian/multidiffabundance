#!/usr/bin/env bash

###############################################################################

function usage(){
    echo "MDA: Multi Differential Abundance tool"
    echo "Usage: $0 [options] <count_data> <meta_data> <function> <outputprefix>"
    echo "  Options:"
    echo "    -a|--aldex2   : Run ALDex2"
    echo "    -A|--ancombc  : Run ANCOMBC"
    echo "    -c|--corncob  : Run corncob"
    echo "    -d|--deseq2   : Run DESeq2"
    echo "    -l|--limma    : Run limma"
    echo "    -L|--lmclr    : Run lm CLR"
    echo "    -m|--maaslin2 : Run Maaslin2"
    echo "    --complement  : run the complement of the current selection
                              (i.e. -c --complement would NOT run corncob)"
    echo "    --nocache     : Do not use a cache"
    echo "  Inputs:"
    echo "    count_data : File path to a sample*taxa (rows*columns) tab separated file.
                           First column is sample IDs"
    echo "    meta_data  : File path to a sample*determinant (rows*columns) tab separated file.
                           First column is sample IDs"
    echo "    function   : Either a string in R formula format (e.g. ~ a + b + c), or
                           a file path to a line-separated list of these formulas"
    echo "    outputprefix : A path to a location of the outputs"

}

###############################################################################
# PROCESS INPUTS

ARGS=$(getopt -o 'aAcdlLm' --long 'aldex2,ancombc,corncob,deseq2,limma,lmclr,maaslin2,complement,nocache' -- "$@") || exit
eval "set -- $ARGS"

aldex2=0
ancombc=0
corncob=0
deseq2=0
limma=0
lmclr=0
maaslin2=0
all=1
complement=0
usecache="TRUE"


while true; do
    case $1 in
      (-a|--aldex2)
            all=0; aldex2=1; shift;;
      (-A|--ancombc)
            all=0; ancombc=1; shift;;
      (-c|--corncob)
            all=0; corncob=1; shift;;
      (-d|--deseq2)
            all=0; deseq2=1; shift;;
      (-l|--limma)
            all=0; limma=1; shift;;
      (-L|--lmclr)
            all=0; lmclr=1; shift;;
      (-m|--maaslin2)
            all=0; maaslin2=1; shift;;
      (--complement)
            complement=1; shift;;
      (--nocache)
            usecache=FALSE; shift;;
      (--)  shift; break;;
      (*)   usage $0; exit 1;;           # error
    esac
done

if [ $complement -eq 1 ]; then
    aldex2=$((1-aldex2))
    ancombc=$((1-ancombc))
    corncob=$((1-corncob))
    deseq2=$((1-deseq2))
    limma=$((1-limma))
    lmclr=$((1-lmclr))
    maaslin2=$((1-maaslin2))
fi

if [ $all -eq 1 ] ; then
    aldex2=1
    ancombc=1
    corncob=1
    deseq2=1
    limma=1
    lmclr=1
    maaslin2=1
fi

#############################
# Deal with file inputs

remaining=("$@")

if [ ! "${#remaining[@]}" -eq 4 ]; then
    usage $0
    exit 1
fi

count_data=`realpath ${remaining[0]/#\~/$HOME}`
meta_data=`realpath ${remaining[1]/#\~/$HOME}`
formula=${remaining[2]}
outprefix=`realpath ${remaining[3]/#\~/$HOME}`

function check_if_exists_else_fail(){
    if [ ! -f "$1" ]; then
        echo "Error: File '$1' does not exist."
        exit $2;
    fi
}

check_if_exists_else_fail "$count_data" 2
check_if_exists_else_fail "$meta_data" 2

##################################
# Check formula input data

function check_if_is_formula(){
    echo "as.formula('$1')" | R --no-save &> /dev/null
    echo $?
}

if [ `check_if_is_formula "$formula"` -eq 1 ]; then
    formula=`realpath "${formula/#\~/$HOME}"`
    check_if_exists_else_fail "$formula" 2
fi


echo "library(multidiffabundance)
    raw.formula.data <- mda.load_formula_input('$formula')
    if(mda.verify_formula_input(raw.formula.data)){
        quit(save='no', status=0)}
    else {quit(save='no', status=1)}" | R --no-save &> /dev/null
if [ ! "$?" -eq 0 ]; then
    echo "ERROR: Please check your function input!"
    exit 1
fi

####################################
# Make output data

mkdir -p "$outprefix"

###############################################################################

function run_one_mda(){
    method=$1
    
    echo "[MDA] (`date`) RUNNING $method"
    mkdir -p "$outprefix/$method"

    rcode="
        library(multidiffabundance);
        library(readr);
        args = commandArgs(trailingOnly=TRUE);
        D <- mda.from_cmdargs(args, usecache=$usecache);
        R <- mda.$method(D);
        write_tsv(R\$res, paste0(c(D\$outprefix, 'results.tsv'), collapse=''));
        write_tsv(R\$res.full, paste0(c(D\$outprefix, 'results.full.tsv'), collapse=''))
    "
    
    stdlog="$outprefix/$method/stdout"
    errlog="$outprefix/$method/stderr"
    retlog="$outprefix/$method/retval"
    
    rm -f "$stdlog" "$errlog" "retlog"

    ((Rscript <(echo "$rcode") "$count_data" "$meta_data" "$formula" "$outprefix/$method/" ; echo >"$retlog" "$?") | tee "$stdlog") 3>&1 1>&2 2>&3 | tee $errlog
    
    result=`cat "$retlog"`

    if [ $result -eq 0 ]; then
        echo "[MDA] (`date`) COMPLETED $method. '$outprefix/$method/results.tsv'"
    else
        echo "[MDA] (`date`) FAILED $method. See '$errlog'"
    fi
    return $result
    
}

declare -a result_files

if [ $aldex2 -eq 1 ] ; then
    run_one_mda aldex2 && result_files+=("$outprefix/aldex2/results.tsv")
fi

if [ $ancombc -eq 1 ] ; then
    run_one_mda ancombc && result_files+=("$outprefix/ancombc/results.tsv")
fi

if [ $corncob -eq 1 ] ; then
    run_one_mda corncob && result_files+=("$outprefix/corncob/results.tsv")
fi
    
if [ $deseq2 -eq 1 ] ; then
    run_one_mda deseq2 && result_files+=("$outprefix/deseq2/results.tsv")
fi

if [ $limma -eq 1 ] ; then
    run_one_mda limma && result_files+=("$outprefix/limma/results.tsv")
fi

if [ $lmclr -eq 1 ] ; then
    run_one_mda lmclr && result_files+=("$outprefix/lmclr/results.tsv")
fi

if [ $maaslin2 -eq 1 ] ; then
    run_one_mda maaslin2 && result_files+=("$outprefix/maaslin2/results.tsv")
fi


###############################################################################
# Combine all the outputs into one single output

out_file="$outprefix/results.tsv"

head -n 1 "${result_files[0]}" > "$out_file"
for idx in `seq 0 $((${#result_files[@]}-1))`; do
    tail -n+2 "${result_files[idx]}"
done >> "$out_file"

echo "[MDA] (`date`) OUTPUT '$out_file'"

###############################################################################